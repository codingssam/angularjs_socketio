#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("angularjs_socketio:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
var path = require("path");
var logger = require('../config/winstonconfig');
var TAG = "[express]";

var httpPort = normalizePort(process.env.HTTP_PORT || "80");
app.set("httpPort", httpPort);

var httpsPort = normalizePort(process.env.HTTPS_PORT || "443");
app.set("httpsPort", httpsPort);

var key = fs.readFileSync(path.join(__dirname, "site.key")).toString();
var cert = fs.readFileSync(path.join(__dirname, "site.crt")).toString();
var options = {
  "key": key,
  "cert": cert
};

debug("key: " + key);
debug("cert: " + cert);

var server = http.createServer(app);
var secureServer = https.createServer(options, app);

server.listen(httpPort);
server.on("error", onError);
server.on("listening", onListening);

secureServer.listen(httpsPort);
secureServer.on("error", onError);
secureServer.on("listening", onListening);

app.io.attach(server);
app.io.attach(secureServer);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // httpPort or httpsPort number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind;
  if (this === server) {
    bind = typeof httpPort === "string"
        ? "Pipe " + httpPort
        : "Port " + httpPort;
  } else {
    bind = typeof httpsPort === "string"
        ? "Pipe " + httpsPort
        : "Port " + httpsPort;
  }

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
    var addr = this.address();
    var bind = typeof addr === "string"
        ? "pipe " + addr
        : ((this === server) ? "httpPort ": "httpsPort ") + addr.port;
    debug("Listening on " + bind);
}

process.on('uncaughtException', function(err) {
  logger.log('error', '%s ', TAG, err.message);
  logger.log('error', '%s ', TAG, err.statck);
  process.exit(1);
});